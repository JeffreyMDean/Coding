// Convert a hash into an array of hashes using the keys from each hash as the :id key in each of the array's hashes.
// For example, {321 => {name: "Alice", age: 31}, 322 => {name: "Maria", age: 27}} becomes [{id: 321, name: "Alice", age: 31}, {id: 322, name: "Maria", age: 27}].

function converter(people) {
  return Object.entries(people).map(([key, value]) => ({
    id: parseInt(key),
    ...value,
  }));
}

const inputPeople = {
  321: { name: "Alice", age: 31 },
  322: { name: "Maria", age: 27 },
};
const result = converter(inputPeople);
console.log(result);

// Object.entries has nothing to do with the final structure, but it just a means to access the keys and values
// .map() is the method that creates a new array from the array of key-value pairs generated by Object.entries()
// .map iterates over each element of that array, which in this case are key-value pairs [key, value]
// On each iteration, .map() applies a transformation to that pair, creating a new object { id: key, ...value } for each pair. Inside .map(), you're transforming each [key, value] pair into a new object (i.e., a new hash within the array)
// So, .map() goes through the array of pairs and creates a new object for each pair. The final output is an array of those newly created objects.
// the array syntax in the output comes from .map() because .map() itelf creates a new array (it returns an array)

// Convert an array of hashes into a hash using the :id key from the array's hashes as the keys in the new hash.
// For example, [{id: 1, color: "blue", price: 32}, {id: 2, color: "red", price: 12}] becomes {1 => {id: 1, color: "blue", price: 32}, 2 => {id: 2, color: "red", price: 12}}.

function converter2(items) {
  return items.reduce((hash, item) => {
    let key = item.id;
    let value = item;
    hash[key] = value;
    return hash;
  }, {});
}

const inputItems = [
  { id: 1, color: "blue", price: 32 },
  { id: 2, color: "red", price: 12 },
];
const result2 = converter2(inputItems);
console.log(result2);

// .map() would not bes as effective here becuase .map() is designed for transorming an array into another array, not an object.
